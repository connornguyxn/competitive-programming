#undef _GLIBCXX_DEBUG
#pragma GCC optimize("Ofast,unroll-loops,inline")
#pragma GCC target("avx,avx2,f16c,fma,sse3,ssse3,sse4,sse4.1,sse4.2")
#include <bits/stdc++.h>
using namespace std;
#define nl '\n'

//https://ucode.vn/problems/117588

///////////////////////////////////////
int position_count(int n, int k, int r, int c,
                    vector<int> obst_x, vector<int> obst_y) {
    int d11, d12, d21, d22; // diagonal distances
    int r1, r2; // Vertical distances
    int c1, c2; // Horizontal distances
 
    // Init distance to end of the board.
    d11 = min(r - 1, c - 1);
    d12 = min(n - r, n - c);
    d21 = min(n - r, c - 1);
    d22 = min(r - 1, n - c);

    r1 = c - 1;
    r2 = n - c;

    c1 = r - 1;
    c2 = n - r;
 
    // Find minimum distance to the nearest obstacle
    for (int i = 0; i < k; i++) {
        if (r > obst_x[i] && c > obst_y[i] &&
                 r - obst_x[i] == c - obst_y[i])
            d11 = min(d11, r - obst_x[i] - 1);
 
        if (obst_x[i] > r && obst_y[i] > c &&
                  obst_x[i] - r == obst_y[i] - c)
            d12 = min(d12, obst_x[i] - r - 1);
 
        if (obst_x[i] > r && c > obst_y[i] &&
                   obst_x[i] - r == c - obst_y[i] )
            d21 = min(d21, obst_x[i] - r - 1);
 
        if (r > obst_x[i] && obst_y[i] > c &&
                    r - obst_x[i] == obst_y[i] - c)
            d22 = min(d22, r - obst_x[i] - 1);

        if (r == obst_x[i] && obst_y[i] < c)
            r1 = min(r1, c - obst_y[i] - 1);

        if (r == obst_x[i] && obst_y[i] > c)
            r2 = min(r2, obst_y[i] - c - 1);
 
        if (c == obst_y[i] && obst_x[i] < r)
            c1 = min(c1, r - obst_x[i] - 1);
 
        if (c == obst_y[i] && obst_x[i] > r)
            c2 = min(c2, obst_x[i] - r - 1);
    }
    return d11 + d12 + d21 + d22 + r1 + r2 + c1 + c2;
}
///////////////////////////////////////
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ifstream cin("ucode_quanhau.inp");
    //ofstream cout("ucode_quanhau.out");
    int n, k;
    cin >> n >> k;
    int r, c;
    cin >> r >> c;
    vector<int> obst_x(k);
    vector<int> obst_y(k);
    for (int i = 0; i < k; i++) {
        cin >> obst_x[i] >> obst_y[i];
    };
    cout << position_count(n, k, r, c, obst_x, obst_y) << nl;
}
///////////////////////////////////////




/*
000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000
0000000000000000000000000000000000001111.............1111111000000000000000000000000000000
00000000000000000000000000000000011.. .....11111111.........111000000000000000000000000000
000000000000000000000000000000011.  .1111111111111111111111.. .110000000000000000000000000
0000000000000000000000000000001. ..111111111111111111111111111. .1100000000000000000000000
000000000000000000000000000001. .111111111111111111111111111111. .110000000000000000000000
00000000000000000000000000001. .111111.............11111111111111. .1000000000000000000000
00000000000000000000000000001  111.   ..............   ...11111111. .100000000000000000000
0000000000000000000000000001. .11.  ..11111111111111111..  .1111111. .10000000000000000000
0000000000000000000000000001  111. ..11111111111111111111.  .1111111. .1000000000000000000
000000000000000000000000001. .111.  ..1111111111111111111.. .11111111. .100000000000000000
000000000000000000000000001. 11111.   ...11111111111111...  .11111111. .100000000000000000
000000000000000000000000011 .1111111..   ..............   .11111111111. 110000000000000000
00000000000000000000000001. .1111111111....         ....11111111111111. .10000000000000000
00000000000000000000000001 .1111111111111111111111111111111111111111111  10000000000000000
0000000000000000000000001. .1111111111111111111111111111111111111111111. .1000000000000000
0000000000000000000000001. 11111111111111111111111111111111111111111111. .1000000000000000
000000000000000000000001. .11111111111111111111111111111111111111111111. .1000000000000000
000000000000000000000001. .111111111111111111111111111111111111111111111 .1000000000000000
000000000000000000000011 .1111111111111111111111111111111111111111111111 .1000000000000000
00000000000000000000001. .1111111111111111111111111111111111111111111111. 1000000000000000
00000000000000000000001. 11111111111111111111111111111111111111111111111. 1000000000000000
0000000000000000000001. .11111111111111111111111111111111111111111111111. 1100000000000000
0000000000000000000001. .11111111111111111111111111111111111111111111111. 1100000000000000
0000000000000000000011 .111111111111111111111111111111111111111111111111. 1100000000000000
000000000000000000001. .111111111111111111111111111111111111111111111111. 1100000000000000
000000000000000000001 .1111111111111111111111111111111111111111111111111  1000000000000000
00000000000000000001. .1111111111111111111111111111111111111111111111111 .1000000000000000
00000000000000000001. 11111111111111111111.........11111111111111111111. .1000000000000000
0000000000000000001. .111111111111................... .1111111111111111. .1000000000000000
0000000000000000001. .111111111....111111111111111111. .111111111111111. .1000000000000000
0000000000000000011 .111111111. .100000000000000000001  111111111111111. .1000000000000000
000000111111111111. .111111111. .100000000000000000001  111111111111111. .1000000000000000
00111...............11111111111 .100000000000000000001 .111111111111111. .1000000000000000
001. ..111111111111111111111111. 110000000000000000001  111111111111111. .1000000000000000
001. 11111111111111111111111111. .10000000000000000001  111111111111111. .1000000000000000
001. .1111111111111111111111111. .10000000000000000001 .111111111111111. .1000000000000000
00011. ..11111111111111111111..  .1000000000111111111. .111111111111111 .10000000000000000
0000011.. ................. ...11100000111........... ..11111111111111. .10000000000000000
0000000111111...........111111000000011. ...11111111111111111111111111  110000000000000000
00000000000000000000000000000000000001. .111111111111111111111111111.  .100000000000000000
000000000000000000000000000000000000011. .11111111111111111111111.. ..11000000000000000000
00000000000000000000000000000000000000111.. ......111111111.... ...11000000000000000000000
00000000000000000000000000000000000000000111111...............1111000000000000000000000000
000000000000000000000000000000000000000000000000011111111111100000000000000000000000000000
*/