#ifdef local_debug
#include "include/debugging.h"
#else
#include <bits/stdc++.h>
#endif
using namespace std;
#define ll long long
#define ull unsigned long long
#define ld long double
#define ii pair<int, int>
#define str string
#define nl '\n'
#define sp ' '
#define all(a) a.begin(), a.end()
#define dec_point(n) fixed << showpoint << setprecision(n)
#define mp_optimize(mp) mp.reserve(4096); mp.max_load_factor(0.1);
const int LIM = 1e6;
const ull MOD = 1e9 + 7;

// <problem link>
// <tags>

struct state {
    str s = "";
    int cnt = 0;
    vector<int> prev = {};
};
///////////////////////////////////////
char encode(int a) {
    return a + 'a' - 1;
};
int decode(char a) {
    return a - 'a' + 1;
};
void push_states(state c, int p, deque<state> &call) {
    for (auto &i : {-4, 4, -1, 1}) {
        if (p + i < 0 || p + i > 15) {
            continue;
        };
        state n = c;
        n.s[p] = c.s[p + i];
        n.s[p + i] = c.s[p];
        n.cnt++;
        n.prev.push_back(decode(n.s[p]));
        call.push_front(n);
    };
}
///////////////////////////////////////
int main() {
    // ifstream cin("_input");
    // ofstream cout("_output");
    cin.tie(0) -> sync_with_stdio(0);
    /////////////////
    int inp;
    state s;
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            cin >> inp;
            s.s += encode(inp);
        };
    };
    state e = {"abcdefghijklmno`"};
    deque<state> fq = {s}, bq = {e}; // forward/backwards queue
    unordered_map<str, state> fvis;
    mp_optimize(fvis);
    unordered_map<str, bool> bvis;
    mp_optimize(bvis);
    while (!fq.empty()) {
        // current state (forward)
        state fc = fq.back();
        fq.pop_back();
        // skip visited states
        if (fvis.count(fc.s)) {
            continue;
        };
        // store number of moves to reach state
        fvis[fc.s] = fc;
        // blank position (forward)
        int fp = fc.s.find(encode(0));
        // push new states to queue (forward)
        push_states(fc, fp, fq);
        /////////////////
        state bc = bq.back(); // current state (backwards)
        bq.pop_back();
        // skip visited states
        if (bvis.count(bc.s)) {
            continue;
        };
        bvis[bc.s] = true;
        // if 2 bfs join
        if (fvis.count(bc.s)) {
            cout << bc.cnt + fvis[bc.s].cnt << nl;
            for (auto &i : fvis[bc.s].prev) {
                cout << i << sp;
            };
            for (int i = bc.prev.size() - 1; i >= 0; i--) {
                cout <<  bc.prev[i] << sp;
            };
            break;
        };
        int bp = bc.s.find(encode(0));
        push_states(bc, bp, bq);
    };
    /////////////////
    return 0;
};
/*
000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000
0000000000000000000000000000000000001111.............1111111000000000000000000000000000000
00000000000000000000000000000000011.. .....11111111.........111000000000000000000000000000
000000000000000000000000000000011.  .1111111111111111111111.. .110000000000000000000000000
0000000000000000000000000000001. ..111111111111111111111111111. .1100000000000000000000000
000000000000000000000000000001. .111111111111111111111111111111. .110000000000000000000000
00000000000000000000000000001. .111111.............11111111111111. .1000000000000000000000
00000000000000000000000000001  111.   ..............   ...11111111. .100000000000000000000
0000000000000000000000000001. .11.  ..11111111111111111..  .1111111. .10000000000000000000
0000000000000000000000000001  111. ..11111111111111111111.  .1111111. .1000000000000000000
000000000000000000000000001. .111.  ..1111111111111111111.. .11111111. .100000000000000000
000000000000000000000000001. 11111.   ...11111111111111...  .11111111. .100000000000000000
000000000000000000000000011 .1111111..   ..............   .11111111111. 110000000000000000
00000000000000000000000001. .1111111111.................11111111111111. .10000000000000000
00000000000000000000000001 .1111111111111111111111111111111111111111111  10000000000000000
0000000000000000000000001. .1111111111111111111111111111111111111111111. .1000000000000000
0000000000000000000000001. 11111111111111111111111111111111111111111111. .1000000000000000
000000000000000000000001. .11111111111111111111111111111111111111111111. .1000000000000000
000000000000000000000001. .111111111111111111111111111111111111111111111 .1000000000000000
000000000000000000000011 .1111111111111111111111111111111111111111111111 .1000000000000000
00000000000000000000001. .1111111111111111111111111111111111111111111111. 1000000000000000
00000000000000000000001. 11111111111111111111111111111111111111111111111. 1000000000000000
0000000000000000000001. .11111111111111111111111111111111111111111111111. 1100000000000000
0000000000000000000001. .11111111111111111111111111111111111111111111111. 1100000000000000
0000000000000000000011 .111111111111111111111111111111111111111111111111. 1100000000000000
000000000000000000001. .111111111111111111111111111111111111111111111111. 1100000000000000
000000000000000000001 .1111111111111111111111111111111111111111111111111  1000000000000000
00000000000000000001. .1111111111111111111111111111111111111111111111111 .1000000000000000
00000000000000000001. 11111111111111111111.........11111111111111111111. .1000000000000000
0000000000000000001. .111111111111................... .1111111111111111. .1000000000000000
0000000000000000001. .111111111....111111111111111111. .111111111111111. .1000000000000000
0000000000000000011 .111111111. .100000000000000000001  111111111111111. .1000000000000000
000000111111111111. .111111111. .100000000000000000001  111111111111111. .1000000000000000
00111...............11111111111 .100000000000000000001 .111111111111111. .1000000000000000
001. ..111111111111111111111111. 110000000000000000001  111111111111111. .1000000000000000
001. 11111111111111111111111111. .10000000000000000001  111111111111111. .1000000000000000
001. .1111111111111111111111111. .10000000000000000001 .111111111111111. .1000000000000000
00011. ..11111111111111111111..  .1000000000111111111. .111111111111111 .10000000000000000
0000011.. ................. ...11100000111........... ..11111111111111. .10000000000000000
0000000111111...........111111000000011. ...11111111111111111111111111  110000000000000000
00000000000000000000000000000000000001. .111111111111111111111111111.  .100000000000000000
000000000000000000000000000000000000011. .11111111111111111111111.. ..11000000000000000000
00000000000000000000000000000000000000111.. ......111111111.... ...11000000000000000000000
00000000000000000000000000000000000000000111111...............1111000000000000000000000000
000000000000000000000000000000000000000000000000011111111111100000000000000000000000000000
*/